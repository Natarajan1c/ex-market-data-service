--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.ComplaintsTest where

import DA.Assert
import DA.TimeService.TimeService
import DA.Time as T

import DA.RefApps.MarketDataService.DataStream
import DA.RefApps.MarketDataService.DataLicense
import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.Publication

import Test.DA.RefApps.MarketDataService.RolesTest

testConsumerCanClaimNonPerformance : Scenario ()
testConsumerCanClaimNonPerformance = scenario do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  let
    afterStart = addRelTime now (hours 2)
    licenseKey = (Publisher mdVendorParty, Consumer endUserParty, reference)

  currentTime <- submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterStart

  submit endUserParty do
    (licenseId, license) <- fetchByKey @RegisteredDataLicense licenseKey
    nonPerformanceCid <- exercise licenseId RegisteredDataLicense_ClaimNonPerformance
    nonPerformance <- fetch nonPerformanceCid
    nonPerformance.licenseData === license.licenseData
    nonPerformance.claimed === afterStart

  submitMustFail mdVendorParty $
    exercise mdvStreamId StartDataStream with
      newObservation = currentObservation

testConsumerCannotClaimNonPerformanceBeforeStart : Scenario ()
testConsumerCannotClaimNonPerformanceBeforeStart = scenario do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  let
    licenseKey = (Publisher mdVendorParty, Consumer endUserParty, reference)

  (licenseId, _) <- submit endUserParty do
    fetchByKey @RegisteredDataLicense licenseKey

  submitMustFail endUserParty do
    exercise licenseId RegisteredDataLicense_ClaimNonPerformance

testConsumerCanClaimStalePublication : Scenario ()
testConsumerCanClaimStalePublication = scenario do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer endUserParty, reference)
    afterStale = addRelTime now (hours (staleHours + 1))
    someCleanValue = CleanPrice with clean = 4.0

  submit mdVendorParty do
    mdvStreamId <- exercise mdvStreamId StartDataStream with
      newObservation = currentObservation
    exercise mdvStreamId UpdateObservation with
      time = now
      newValue = someCleanValue

  submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterStale

  submit endUserParty do
    (licenseId, license) <- fetchByKey @LiveStreamLicense lookupKey
    (publicationId, publication) <- fetchByKey @Publication lookupKey
    stalePublicationCid <- exercise licenseId ClaimStale with publicationId
    stalePublication <- fetch stalePublicationCid
    stalePublication.licenseData === license.licenseData
    stalePublication.publication === publication
    stalePublication.claimed === afterStale

testConsumerCannotClaimStalePublicationBeforeStaleTime : Scenario ()
testConsumerCannotClaimStalePublicationBeforeStaleTime = scenario do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, staleHours)
    <- roleSetup

  let
    lookupKey = (Publisher mdVendorParty, Consumer endUserParty, reference)
    beforeStale = addRelTime now (hours (staleHours - 1))
    someCleanValue = CleanPrice with clean = 4.0

  submit mdVendorParty do
    mdvStreamId <- exercise mdvStreamId StartDataStream with
      newObservation = currentObservation
    exercise mdvStreamId UpdateObservation with
      time = now
      newValue = someCleanValue

  submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = beforeStale

  (licenseId, publicationId) <- submit endUserParty do
    (licenseId, _) <- fetchByKey @LiveStreamLicense lookupKey
    (publicationId, _) <- fetchByKey @Publication lookupKey
    pure (licenseId, publicationId)

  submitMustFail endUserParty do
    exercise licenseId ClaimStale with publicationId
