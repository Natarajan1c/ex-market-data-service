--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module Test.DA.RefApps.MarketDataService.ExpirationTest where

import DA.Assert
import DA.Time qualified as T
import DA.Date
import DA.TimeService.TimeService

import DA.RefApps.MarketDataService.DataLicense
import DA.RefApps.MarketDataService.DataStream
import DA.RefApps.MarketDataService.MarketDataTypes
import DA.RefApps.MarketDataService.Publication

import Test.DA.RefApps.MarketDataService.RolesTest

testLicenseExpiryClosesNonFreshStream : Scenario ()
testLicenseExpiryClosesNonFreshStream = scenario do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  mdvStreamId <- submit mdVendorParty $
    exercise mdvStreamId StartDataStream with
      newObservation = currentObservation

  currentTime <- submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterExpiry

  submit mdVendorParty do
    mdvStreamId <- exercise mdvStreamId UpdateObservation with
      time = now
      newValue = CleanPrice with clean = 4.0
    mdvStream <- fetch mdvStreamId
    mdvStream.consumers === []

  let
    publisher = Publisher mdVendorParty
    consumer = Consumer endUserParty
    lookupKey = (publisher, consumer, reference)

  publication <- submit mdVendorParty do lookupByKey @Publication lookupKey
  case publication of
    Some _ -> fail "unexpected contract: Publication should have been closed"
    None -> pure ()

  liveStreamLicense <- submit mdVendorParty do lookupByKey @LiveStreamLicense lookupKey
  case liveStreamLicense of
    Some _ -> fail "unexpected contract: LiveStreamLicense should have been expired"
    None -> pure ()

testLicenseExpiryPreventsStartingStream : Scenario ()
testLicenseExpiryPreventsStartingStream = scenario do
  (reference, currentObservation, operator,  _, _, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup

  currentTime <- submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterExpiry

  submitMustFail mdVendorParty do
    exercise mdvStreamId StartDataStream with
      newObservation = currentObservation

testLicenseExpiryClosesFreshStream : Scenario ()
testLicenseExpiryClosesFreshStream = scenario do
  (reference, currentObservation, operator, endUserParty, mdvCon1Relation, now, afterExpiry, currentTimeCid, mdVendorParty, mdvStreamId, _)
    <- roleSetup
  mdvStreamId <- submit mdVendorParty $
    exercise mdvStreamId StartDataStream with
      newObservation = currentObservation

  currentTime <- submit operator do
    exercise currentTimeCid UpdateCurrentTime with newCurrentTime = afterExpiry

  submit mdVendorParty do
    mdvStreamId <- exercise mdvStreamId UpdateLicenses
    mdvStream <- fetch mdvStreamId
    mdvStream.consumers === []

  let
    publisher = Publisher mdVendorParty
    consumer = Consumer endUserParty
    lookupKey = (publisher, consumer, reference)

  publication <- submit mdVendorParty do lookupByKey @Publication lookupKey
  case publication of
    Some _ -> fail "unexpected contract: Publication should have been closed"
    None -> pure ()

  liveStreamLicense <- submit mdVendorParty do lookupByKey @LiveStreamLicense lookupKey
  case liveStreamLicense of
    Some _ -> fail "unexpected contract: LiveStreamLicense should have been expired"
    None -> pure ()

testCheckIsExpire : Scenario ()
testCheckIsExpire = scenario $ do
  operator <- getParty "Operator"
  party1 <- getParty "Party1"
  party2 <- getParty "Party1"

  currentTimeCid <- submit operator do
    create CurrentTime with
      operator = operator
      currentTime = appStartTime
      observers = [operator, party1, party2]

  let futureTime = T.time (fromGregorian (2020, Jan, 1)) 1 1 1
      isin = InstrumentId "ISIN"
      ref = ObservationReference "market" isin $ fromGregorian (2021, Jan, 1)
      publisherParty1 = Publisher party1
      consumerParty2 = Consumer party2
      licenseData = LicenseData with
        publisher = publisherParty1
        consumer = consumerParty2
        reference = ref
        starting = futureTime
        ending = futureTime
        stale = T.hours 1
        price = SubscriptionFee 1.0
        operator = operator
  result <- submit party1 $ checkIsExpired operator licenseData
  assertMsg "License should not be expired." $ not result

  submit operator $ exercise currentTimeCid UpdateCurrentTime with newCurrentTime = futureTime
  result <- submit party1 $ checkIsExpired operator licenseData
  assertMsg "License should be expired." $ result
